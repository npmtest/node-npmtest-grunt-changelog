{"/home/travis/build/npmtest/node-npmtest-grunt-changelog/test.js":"/* istanbul instrument in package npmtest_grunt_changelog */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-changelog/lib.npmtest_grunt_changelog.js":"/* istanbul instrument in package npmtest_grunt_changelog */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_grunt_changelog = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_grunt_changelog = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-changelog/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-grunt-changelog && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_grunt_changelog */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_grunt_changelog\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_grunt_changelog.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_grunt_changelog.rollup.js'] =\n            local.assetsDict['/assets.npmtest_grunt_changelog.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_grunt_changelog.__dirname + '/lib.npmtest_grunt_changelog.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-changelog/node_modules/grunt-changelog/Gruntfile.js":"/*\n * grunt-changelog\n * https://github.com/ericmatthys/grunt-changelog\n *\n * Copyright (c) 2013 Eric Matthys\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nmodule.exports = function (grunt) {\n  grunt.initConfig({\n    jshint: {\n      all: [\n        'Gruntfile.js',\n        'tasks/*.js',\n        '<%= nodeunit.tests %>',\n      ],\n      options: {\n        jshintrc: '.jshintrc',\n      },\n    },\n\n    clean: {\n      tests: ['tmp'],\n    },\n\n    changelog: {\n      default_options: {\n        options: {\n          log: 'test/fixtures/log',\n          dest: 'tmp/changelog_default'\n        }\n      },\n\n      formatting_options: {\n        options: {\n          log: 'test/fixtures/log',\n          dest: 'tmp/changelog_formatting',\n          template: '{{> fixes}}{{> features}}\\n',\n\n          partials: {\n            features: '{{#each features}}{{> feature}}{{/each}}',\n            feature: '{{this}}',\n            fixes: '{{#each fixes}}{{> fix}}{{/each}}',\n            fix: '{{this}}'\n          }\n        }\n      },\n\n      formatting_options_specialchars: {\n        options: {\n          log: 'test/fixtures/log_specialchars',\n          dest: 'tmp/changelog_formatting_specialchars',\n\n          partials: {\n            feature: '{{{this}}}\\n',\n            fix: '{{{this}}}\\n'\n          }\n        }\n      },\n\n      regex_options: {\n        options: {\n          log: 'test/fixtures/log',\n          dest: 'tmp/changelog_regex',\n          featureRegex: /^closes #\\d+:?(.*)$/gm,\n          fixRegex: /^fixes #\\d+:?(.*)$/gm\n        }\n      },\n\n      empty_partial: {\n        options: {\n          log: 'test/fixtures/log_fixes_only',\n          dest: 'tmp/changelog_empty'\n        }\n      },\n\n      prepend_prime: {\n        options: {\n          log: 'test/fixtures/log',\n          dest: 'tmp/changelog_prepend',\n          insertType: 'prepend'\n        }\n      },\n\n      prepend: {\n        options: {\n          log: 'test/fixtures/log_insert_type',\n          dest: 'tmp/changelog_prepend',\n          insertType: 'prepend'\n        }\n      },\n\n      append_prime: {\n        options: {\n          log: 'test/fixtures/log',\n          dest: 'tmp/changelog_append',\n          insertType: 'append'\n        }\n      },\n\n      append: {\n        options: {\n          log: 'test/fixtures/log_insert_type',\n          dest: 'tmp/changelog_append',\n          insertType: 'append'\n        }\n      },\n\n      log_arguments: {\n        options: {\n          logArguments: [\n            '--pretty=* %h - %ad: %s',\n            '--no-merges',\n            '--date=short'\n          ],\n          dest: 'tmp/changelog_logArguments',\n          template: '[date]\\n\\n{{> features}}',\n          after: '2014-04-08',\n          before: '2014-08-21',\n          featureRegex: /^(.*)$/gim,\n          partials: {\n            features: '{{#if features}}{{#each features}}{{> feature}}{{/each}}{{else}}{{> empty}}{{/if}}\\n',\n            feature: '- {{this}} {{this.date}}\\n'\n          }\n        }\n      },\n\n      file_header: {\n        options: {\n          log: 'test/fixtures/log',\n          dest: 'tmp/changelog_fileHeader',\n          fileHeader: '# Changelog'\n        }\n      },\n\n      file_header_prepend_prime: {\n        options: {\n          log: 'test/fixtures/log',\n          dest: 'tmp/changelog_fileHeader_prepend',\n          insertType: 'prepend',\n          fileHeader: '# Changelog'\n        }\n      },\n\n      file_header_prepend: {\n        options: {\n          log: 'test/fixtures/log_insert_type',\n          dest: 'tmp/changelog_fileHeader_prepend',\n          insertType: 'prepend',\n          fileHeader: '# Changelog'\n        }\n      },\n\n      file_header_append_prime: {\n        options: {\n          log: 'test/fixtures/log',\n          dest: 'tmp/changelog_fileHeader_append',\n          insertType: 'append',\n          fileHeader: '# Changelog'\n        }\n      },\n\n      file_header_append: {\n        options: {\n          log: 'test/fixtures/log_insert_type',\n          dest: 'tmp/changelog_fileHeader_append',\n          insertType: 'append',\n          fileHeader: '# Changelog'\n        }\n      }\n    },\n\n    nodeunit: {\n      tests: ['test/*_test.js']\n    }\n\n  });\n\n  grunt.loadTasks('tasks');\n\n  grunt.loadNpmTasks('grunt-contrib-jshint');\n  grunt.loadNpmTasks('grunt-contrib-clean');\n  grunt.loadNpmTasks('grunt-contrib-nodeunit');\n\n  grunt.registerTask('test', ['clean', 'changelog', 'nodeunit']);\n\n  grunt.registerTask('default', ['jshint', 'test']);\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-changelog/node_modules/grunt-changelog/tasks/changelog.js":"/*\n* grunt-changelog\n* https://github.com/ericmatthys/grunt-changelog\n*\n* Copyright (c) 2013 Eric Matthys\n* Licensed under the MIT license.\n*/\n\n'use strict';\n\nmodule.exports = function (grunt) {\n  var _ = require('underscore');\n  var Handlebars = require('handlebars');\n  var moment = require('moment');\n  var semver = require('semver');\n\n  grunt.registerMultiTask('changelog', 'Generate a changelog based on commit messages.', function (after, before) {\n    // Merge task-specific and/or target-specific options with these defaults.\n    var options = this.options({\n      featureRegex: /^(.*)closes #\\d+:?(.*)$/gim,\n      fixRegex: /^(.*)fixes #\\d+:?(.*)$/gim,\n      dest: 'changelog.txt',\n      template: '{{> features}}{{> fixes}}',\n      after: after,\n      before: before\n    });\n\n    // Extend partials separately so only one custom partial can be specified\n    // without having to provide every single partial.\n    var partials = _.extend({\n      features: 'NEW:\\n\\n{{#if features}}{{#each features}}{{> feature}}{{/each}}{{else}}{{> empty}}{{/if}}\\n',\n      feature: '  - {{{this}}}\\n',\n      fixes: 'FIXES:\\n\\n{{#if fixes}}{{#each fixes}}{{> fix}}{{/each}}{{else}}{{> empty}}{{/if}}',\n      fix: '  - {{{this}}}\\n',\n      empty: '  (none)\\n'\n    }, options.partials);\n\n    var isDateRange;\n\n    // Determine if a date or a commit sha / tag was provided for the after\n    // option. This will determine what kind of range we need to use.\n    if (options.after) {\n\n      if (!semver.valid(options.after)) {\n        after = moment(options.after);\n        isDateRange = after.isValid();\n      }\n\n      // Fallback to the provided after value if it is not a valid date. This\n      // likely means that a commit sha or tag is being used.\n      if (!isDateRange)\n        after = options.after;\n    } else {\n      // If no after option is provided, default to using the last week.\n      after = moment().subtract('days', 7);\n      isDateRange = true;\n    }\n\n    if (isDateRange) {\n      before = options.before ? moment(options.before) : moment();\n    } else {\n      before = options.before ? options.before : 'HEAD';\n    }\n\n    // Compile and register our templates and partials.\n    var template = Handlebars.compile(options.template);\n\n    for (var key in partials) {\n      Handlebars.registerPartial(key, Handlebars.compile(partials[key]));\n    }\n\n    grunt.verbose.writeflags(options, 'Options');\n\n    // Loop through each match and build the array of changes that will be\n    // passed to the template.\n    function getChanges(log, regex) {\n      var changes = [];\n      var match;\n\n      while ((match = regex.exec(log))) {\n        var change = '';\n\n        for (var i = 1, len = match.length; i < len; i++) {\n          change += match[i];\n        }\n\n        changes.push(change.trim());\n      }\n\n      return changes;\n    }\n\n    // Generate the changelog using the templates defined in options.\n    function getChangelog(log) {\n      var data = {\n        date: moment().format('YYYY-MM-DD'),\n        features: getChanges(log, options.featureRegex),\n        fixes: getChanges(log, options.fixRegex)\n      };\n\n      return template(data);\n    }\n\n    // Write the changelog to the destination file.\n    function writeChangelog(changelog) {\n      var fileContents = null;\n      var firstLineFile = null;\n      var firstLineFileHeader = null;\n      var regex = null;\n\n      if (options.insertType && grunt.file.exists(options.dest)) {\n        fileContents = grunt.file.read(options.dest);\n        firstLineFile = fileContents.split('\\n')[0];\n        grunt.log.debug('firstLineFile = ' + firstLineFile);\n\n        switch (options.insertType) {\n          case 'prepend':\n            changelog = changelog + '\\n' + fileContents;\n            break;\n          case 'append':\n            changelog = fileContents + '\\n' + changelog;\n            break;\n          default:\n            grunt.fatal('\"' + options.insertType + '\" is not a valid insertType. Please use \"append\" or \"prepend\".');\n            return false;\n        }\n      }\n\n      if (options.fileHeader) {\n        firstLineFileHeader = options.fileHeader.split('\\n')[0];\n        grunt.log.debug('firstLineFileHeader = ' + firstLineFileHeader);\n\n        if (options.insertType === 'prepend') {\n          if (firstLineFile !== firstLineFileHeader) {\n            changelog = options.fileHeader + '\\n\\n' + changelog;\n          } else {\n            regex = new RegExp(options.fileHeader+'\\n\\n','m');\n            changelog = options.fileHeader + '\\n\\n' + changelog.replace(regex, '');\n          }\n\n        // insertType === 'append' || undefined\n        } else {\n          if (firstLineFile !== firstLineFileHeader) {\n            changelog = options.fileHeader + '\\n\\n' + changelog;\n          }\n        }\n\n      }\n\n\n      grunt.file.write(options.dest, changelog);\n\n      // Log the results.\n      grunt.log.ok(changelog);\n      grunt.log.writeln();\n      grunt.log.writeln('Changelog created at '+ options.dest.toString().cyan + '.');\n    }\n\n    // If a log is passed in as an option, don't run the git log command\n    // and just use the explicit log instead.\n    if (options.log) {\n      // Check to make sure that the log exists before going any further.\n      if (!grunt.file.exists(options.log)) {\n        grunt.fatal('This log file does not exist.');\n        return false;\n      }\n\n      var result = grunt.file.read(options.log);\n      writeChangelog(getChangelog(result));\n\n      return;\n    }\n\n    var done = this.async();\n\n    // Build our options for the git log command.\n    // Default: Only print the commit message without paging.\n    var args = [\n      '--no-pager',\n      'log'\n    ];\n\n    if (options.logArguments) {\n      args.push.apply(args, options.logArguments);\n    } else {\n      args.push(\n        '--pretty=format:%s',\n        '--no-merges'\n      );\n    }\n\n    if (isDateRange) {\n      args.push('--after=\"' + after.format() + '\"');\n      args.push('--before=\"' + before.format() + '\"');\n    } else {\n      args.splice(2, 0, after + '..' + before);\n    }\n\n    grunt.verbose.writeln('git ' + args.join(' '));\n\n    // Run the git log command and parse the result.\n    grunt.util.spawn(\n      {\n        cmd: 'git',\n        args: args\n      },\n\n      function (error, result) {\n        if (error) {\n          grunt.log.error(error);\n          return done(false);\n        }\n\n        writeChangelog(getChangelog(result));\n        done();\n      }\n    );\n  });\n};\n"}